from datetime import date
from flask import Blueprint, jsonify, request, abort
from flask_jwt_extended import jwt_required, get_jwt_identity
from marshmallow.exceptions import ValidationError
from werkzeug.exceptions import BadRequest
from main import db
from models.campaigns import Campaign
from models.users import User
from models.characters import Character
from schema.campaign_schema import campaign_schema, campaigns_schema
from schema.user_schema import users_schema
from schema.character_schema import character_schema


campaigns = Blueprint('campaigns', __name__, url_prefix="/campaigns")

# Error handling 
# @cards.errorhandler(KeyError)
# def key_error(e):
#     return jsonify({'error': f'The field {e} is required'}), 400

# @cards.errorhandler(BadRequest)
# def default_error(e):
#     return jsonify({'error': e.description}), 400

# @cards.errorhandler(ValidationError)
# def validation_error(e):
#     return jsonify(e.messages), 400

# The GET routes endpoint
@campaigns.route("/<int:id>/", methods=["GET"])
def get_campaign(id):
    stmt = db.select(Campaign).filter_by(id=id)
    campaign = db.session.scalar(stmt)
    #return an error if the campaign doesn't exist
    if not campaign:
        return abort(400, description= "Campaign does not exist")
    # Convert the campaigns from the database into a JSON format and store them in result
    result = campaign_schema.dump(campaign)
    # return the data in JSON format
    return jsonify(result)

# @cards.route("/", methods=["GET"])
# def get_cards():
#     # get all the cards from the database table
#     stmt = db.select(Card)
#     cards_list = db.session.scalars(stmt)
#     # Convert the cards from the database into a JSON format and store them in result
#     result = cards_schema.dump(cards_list)
#     # return the data in JSON format
#     return jsonify(result)
#     #return "List of cards retrieved"

# # @cards.route("/search", methods=["GET"])
# # def search_cards():
# #     # return the content of the query string
# #     return request.query_string

# # @cards.route("/search", methods=["GET"])
# # def search_cards():
# #     # return the content of the query string
# #     return request.args.get('priority')

# @cards.route("/search", methods=["GET"])
# def search_cards():
#     # create an empty list in case the query string is not valid
#     cards_list = []

#     if request.args.get('priority'):
#         stmt = db.select(Card).filter_by(priority= request.args.get('priority'))
#         cards_list = db.session.scalars(stmt)
#     elif request.args.get('status'):
#         stmt = db.select(Card).filter_by(status= request.args.get('status'))
#         cards_list = db.session.scalars(stmt)

#     result = cards_schema.dump(cards_list)
#     # return the data in JSON format
#     return jsonify(result)

# @cards.route("/users", methods=["GET"])
# def get_users():
#     # get all the users from the database table
#     stmt = db.select(User)
#     users_list = db.session.scalars(stmt)
#     # Convert the users from the database into a JSON format and store them in result
#     result = users_schema.dump(users_list)
#     # return the data in JSON format
#     return jsonify(result)

# # The POST route endpoint
# @cards.route("/<int:id>/", methods=["PUT"])
# @jwt_required()
# def update_card(id):
#     # #Create a new card
#     card_fields = card_schema.load(request.json)

#     #get the user id invoking get_jwt_identity
#     user_id = get_jwt_identity()
#     #Find it in the db
#     stmt = db.select(User).filter_by(id=user_id)
#     user = db.session.scalar(stmt)
#     #Make sure it is in the database
#     if not user:
#         return abort(401, description="Invalid user")
#     # Stop the request if the user is not an admin
#     if not user.admin:
#         return abort(401, description="Unauthorised user")
#     # find the card
#     stmt = db.select(Card).filter_by(id=id)
#     card = db.session.scalar(stmt)
#     #return an error if the card doesn't exist
#     if not card:
#         return abort(400, description= "Card does not exist")
#     #update the car details with the given values
#     card.title = card_fields["title"]
#     card.description = card_fields["description"]
#     card.status = card_fields["status"]
#     card.priority = card_fields["priority"]
#     # not taken from the request, generated by the server
#     card.date = date.today()
#     # add to the database and commit
#     db.session.commit()
#     #return the card in the response
#     return jsonify(card_schema.dump(card))

# # Create a new card
# @cards.route("/", methods=["POST"])
# @jwt_required()
# def create_card():
#     #Create a new card
#     card_fields = card_schema.load(request.json)
#     # if 'title' not in card_fields or card_fields['title'] == '':
#     #     return jsonify({'error': 'The \'title\' field is required'}), 400

#     # get the id from jwt
#     user_id = get_jwt_identity()
#     new_card = Card()
#     new_card.title = card_fields["title"]
#     new_card.description = card_fields["description"]
#     new_card.status = card_fields["status"]
#     new_card.priority = card_fields["priority"]
#     # not taken from the request, generated by the server
#     new_card.date = date.today()
#     # Use that id to set the ownership of the card
#     new_card.user_id = user_id
#     # add to the database and commit
#     db.session.add(new_card)
#     db.session.commit()
#     #return the card in the response
#     return jsonify(card_schema.dump(new_card))
#     #return "Card created"

# #POST a new comment
# @cards.route("/<int:id>/comments", methods=["POST"])
# # logged in user required
# @jwt_required()
# # Card id required to assign the comment to a car
# def post_comment(id):
#     # #Create a new comment
#     comment_fields = comment_schema.load(request.json)

#     #get the user id invoking get_jwt_identity
#     user_id = get_jwt_identity()
#     #Find it in the db
#     stmt = db.select(User).filter_by(id=user_id)
#     user = db.session.scalar(stmt)
#     #Make sure it is in the database
#     if not user:
#         return abort(401, description="Invalid user")

#     # find the card
#     stmt = db.select(Card).filter_by(id=id)
#     card = db.session.scalar(stmt)
#     #return an error if the card doesn't exist
#     if not card:
#         return abort(400, description= "Card does not exist")
#     #create the comment with the given values
#     new_comment = Comment()
#     new_comment.message = comment_fields["message"]
#     # Use the card gotten by the id of the route
#     new_comment.card = card
#     # Use that id to set the ownership of the card
#     new_comment.user_id = user_id
#     # add to the database and commit
#     db.session.add(new_comment)
#     db.session.commit()
#     #return the card in the response
#     return jsonify(card_schema.dump(card))


# # Finally, we round out our CRUD resource with a DELETE method
# @cards.route("/<int:id>/", methods=["DELETE"])
# @jwt_required()
# def delete_card(id):
#     #get the user id invoking get_jwt_identity
#     user_id = get_jwt_identity()
#     #Find it in the db
#     stmt = db.select(User).filter_by(id=user_id)
#     user = db.session.scalar(stmt)
#     #Make sure it is in the database
#     if not user:
#         return abort(401, description="Invalid user")
#     # Stop the request if the user is not an admin
#     if not user.admin:
#         return abort(401, description="Unauthorised user")
#     # find the card
#     stmt = db.select(Card).filter_by(id=id)
#     card = db.session.scalar(stmt)
#     #return an error if the card doesn't exist
#     if not card:
#         return abort(400, description= "Card doesn't exist")
#     #Delete the card from the database and commit
#     db.session.delete(card)
#     db.session.commit()
#     #return the card in the response
#     return jsonify(card_schema.dump(card))
#     #return "Card Deleted"